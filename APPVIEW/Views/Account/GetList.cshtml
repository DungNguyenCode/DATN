@using APPDATA.Models;
@model X.PagedList.IPagedList<APPDATA.Models.Account>
@using X.PagedList.Web.Common
@using X.PagedList
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Account-List";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    int stt = 0;

}
@functions
{
    private string GetRoleName(Guid? roleId)
    {
        var roles = ViewBag.Roles as List<Role>;
        var role = roles.FirstOrDefault(c => c.id == roleId);
        if (role != null)
        {

            return role.name;
        }
        return "No Data";
    }
}
<div class="card">
    <div class="card-header">
        <h5 class="card-title">Account</h5>
    </div>
    <form asp-action="getlist">
        <div class="card-header row">
            <div class="col-md-3">
                <select id="FilterTransaction" class="form-select text-capitalize" name="status">
                    <option value=""> Select Status </option>
                    <option value="2" class="text-capitalize">Blocked</option>
                    <option value="1" class="text-capitalize">Active</option>
                    <option value="0" class="text-capitalize">Inactive</option>
                </select>
            </div>
            <div class="col-md-3">
                <select id="UserRole" class="form-select text-capitalize" name="role">
                    <option value=""> Select Role </option>
                    @foreach (var item in ViewBag.Roles)
                    {
                        <option value="@item.id">@item.name</option>
                    }
                   
                </select>
            </div>
            <div class="col-md-3">
                <div id="DataTables_Table_0_filter" class="dataTables_filter">
                    <label><input type="search" class="form-control" placeholder="Search.." aria-controls="DataTables_Table_0" name="tk" /></label>
                </div>
            </div> 
            <div class="col-md-3">
                <div id="DataTables_Table_0_filter" class="dataTables_filter">
                    <label><button class="btn btn-success mb-3" type="submit">Tìm kiếm</button></label>
                </div>
            </div>
        </div>
    </form>
  
    <div class="card-body">
        <a class="btn btn-success mb-3" asp-controller="Account" asp-action="Create">Create New</a>
        @*<form asp-action="Search" method="get" class="form-inline" style="margin-left: 1000px">
            <input placeholder="Search" type="text" name="searchTerm" id="searchTerm" class="form-control" aria-label="Recipient's username" aria-describedby="basic-addon2" />
        </form>*@
        @if (!string.IsNullOrEmpty(ViewData["ErrorMessage"] as string))
        {
            <div class="alert alert-warning alert-dismissible" role="alert">
                @ViewData["ErrorMessage"]

            </div>

        }
        else if (!string.IsNullOrEmpty(ViewData["Sucsess"] as string))
        {
            <div class="alert alert-success" role="alert">
                @ViewData["Sucsess"]

            </div>
        }
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>Name</th>
                        <th>Email Address</th>
                        <th>Role</th>
                        <th>Avatar</th>
                        <th>Create Date</th>
                        <th>Update Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@(stt += 1)</td>
                                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                <td>
                                    @if (item.IdRole.HasValue)
                                    {
                                        var roleName = GetRoleName(item.IdRole);
                                        if (!string.IsNullOrEmpty(roleName))
                                        {
                                            if (roleName.Contains("Admin"))
                                            {
                                                <span class="mdi mdi-laptop mdi-24px text-danger me-1"></span>
                                            }
                                            else if (roleName.Contains("Customer"))
                                            {
                                                <span class="mdi mdi-account-outline mdi-24px text-primary me-1"></span>
                                            }
                                            else if (roleName.Contains("Staff"))
                                            {
                                                <span class="mdi mdi-cog-outline text-warning mdi-24px me-1"></span>
                                            }
                                            @roleName
                                        }
                                    }
                                </td>
                                <td>
                                    <img src="~/UserImage/@item.Avatar" alt="Avatar" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                                </td>
                                <td>
                                    @{
                                        DateTime createDate = item.Create_date;
                                        string formattedDate = createDate != DateTime.MinValue
                                        ? createDate.ToString("dd/MM/yyyy")
                                        : "Not changed";
                                    }
                                    @formattedDate
                                </td>
                                <td>
                                    @{
                                        DateTime updatedDate = item.Update_date;
                                        string formattedUpdateDate = updatedDate != DateTime.MinValue
                                        ? updatedDate.ToString("dd/MM/yyyy")
                                        : "Not changed";
                                    }
                                    @formattedUpdateDate
                                </td>
                                <td>
                                    @if (item.Status == 1)
                                    {
                                        <span class="badge bg-label-success rounded-pill">Active</span>
                                    }
                                    else if (item.Status == 0)
                                    {
                                        <span class="badge bg-label-warning rounded-pill">InActive</span>
                                    }
                                    else if (item.Status == 2)
                                    {
                                        <span class="badge rounded-pill bg-label-danger">Blocked</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-inline-block text-nowrap">
                                        <button class="btn btn-sm btn-icon btn-text-secondary rounded-pill btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                            <i class="mdi mdi-dots-vertical mdi-20px"></i>
                                        </button>
                                        <div class="dropdown-menu dropdown-menu-end m-0">
                                            <a href="app-user-view-account.html" class="dropdown-item">
                                                <i class="mdi mdi-eye-outline me-2"></i>
                                                <span>View</span>
                                            </a>
                                            <a href="@Url.Action("Edit", new { id = item.Id })" class="dropdown-item">
                                                <i class="mdi mdi-pencil-outline me-2"></i>
                                                <span>Edit</span>
                                            </a>
                                            <a href="@Url.Action("Delete", new { id = item.Id })" class="dropdown-item delete-record">
                                                <i class="mdi mdi-delete-outline me-2"></i>
                                                <span>Delete</span>
                                            </a>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" class="text-center">No Data.</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>


<div>
    @Html.PagedListPager(Model, page => Url.Action("GetList", new {page = page, sort=ViewBag.sort}), new PagedListRenderOptions()
    {
    ActiveLiElementClass = "active",
    PageClasses = new[]{ "page-link"},
    LiElementClasses=new[] { "page-item"},
    UlElementClasses = new[] { "pagination","justify-content-center", "mt-3", "size" },
    LinkToNextPageFormat = "Next",
    LinkToPreviousPageFormat = "Previous",
    MaximumPageNumbersToDisplay = 8,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always
    })
</div>
