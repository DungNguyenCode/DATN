@model APPDATA.Models.Bill

@{
    ViewData["Title"] = "UpdateAddress";
    Layout = "~/Views/Shared/_LayoutWeb.cshtml";
    Guid id;
    ViewBag.Tinh = "";
}

<style>
            .container {
            margin-top: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        /*.row {
            margin-top: 50px;
            position: relative;
            top: 50px;
             position: relative;
            z-index: 1;/* T/* Thay đổi giá trị tùy thuộc vào chiều cao của thanh menu */
        /*}*/*/
        /*.navbar {
            z-index: 0;
        }*/
        #p{
            position: relative;
            z-index: 1;
        }
        #p h4 {
            padding-top: 50px; /* Tăng giá trị nếu cần thiết để đảm bảo số điện thoại cách xa đủ */
        }
        .form-group {
        display: flex;
        flex-direction: column;
    }

    .info-item {
        margin-bottom: 10px; /* Khoảng cách giữa các info-item */
    }

    .info-item label {
        display: inline-block;
        width: 100px; /* Độ rộng của label */
        margin-right: 10px; /* Khoảng cách giữa label và nội dung */
    }

    .info-item h4 {
       margin: 0; /* Loại bỏ margin mặc định của thẻ h4 */
    white-space: nowrap; /* Ngăn chặn việc ngắt dòng */
    overflow: hidden; /* Ẩn nội dung vượt ra khỏi phần tử cha */
    text-overflow: ellipsis; 
    }

        /* Tùy chỉnh cho ô input */
        input.form-control {
            border: 1px solid #ccc; /* Màu và độ đậm của đường viền */
            border-radius: 5px; /* Độ cong của góc */
            padding: 10px; /* Khoảng cách giữa nội dung và đường viền */
        }

        /* Tùy chỉnh cho nút button */
        .btn-primary {
            background-color: #007bff; /* Màu nền của nút */
            color: #fff; /* Màu chữ của nút */
            border: 1px solid #007bff; /* Màu đường viền của nút */
            border-radius: 5px; /* Độ cong của góc */
            padding: 10px 20px; /* Khoảng cách giữa nội dung và đường viền */
            cursor: pointer; /* Con trỏ khi rê chuột vào nút */
        }

        /* Tùy chỉnh cho chú thích màu đỏ (span.text-danger) */
        span.text-danger {
            color: red; /* Màu chữ của chú thích màu đỏ */
            font-size: 12px; /* Kích thước chữ */
        }

        /* Tùy chỉnh cho các hộp select */
        select.country_select,
        input[list] {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 8px;
        }

        /* Tùy chỉnh cho hr */
        hr {
            border: none; /* Loại bỏ đường viền */
            border-top: 1px solid #ccc; /* Màu và độ đậm của đường viền phía trên */
        }



</style>


<hr />
<<section class="account-section">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2">
                <form asp-action="UpdateAddress">
                    <!-- Các ô input và nút button -->
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <div class="form-group">
                       

                        <div class="info-item">
                      
                            <h4>Địa chỉ cũ:    @Model.Address</h4>

                             <h4>Số điện thoại cũ:     @Model.PhoneNumber</h4>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="sdtMoi">SDT mới:</label>
                        <input type="text" class="form-control" name="sdt" id="sdt" placeholder="SDT mới">
                        <span class="text-danger" id="phoneError"></span>
                    </div>

                    <div class="form-group">
                        <label for="diachictMoi">Địa chỉ cụ thể mới:</label>
                        <input type="text" class="form-control" name="diachict" id="diachict" placeholder="Địa chỉ cụ thể mới">
                    </div>

                    <div class="form-group">
                        <label>Chọn địa chỉ mới:</label>
                        <div class="row">
                            <div class="col-lg-4">
                                <select class="form-control" id="countrySelect" name="province">
                                    @foreach (var item in ViewBag.province)
                                    {
                                        <option value="@item.ProvinceID">@item.ProvinceName</option>
                                    }
                                </select>
                                <input type="hidden" name="province2" value="" />
                            </div>

                            <div class="col-lg-4">
                                <input list="districtSelect" id="district" name="district" placeholder="Chọn quận huyện" class="form-control">
                                <datalist id="districtSelect"></datalist>
                            </div>

                            <div class="col-lg-4">
                                <input list="wardSelect" id="ward" name="ward" placeholder="Chọn xã phường" class="form-control">
                                <datalist id="wardSelect"></datalist>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="feeship">Phí ship thay đổi:</label>
                        <input style="height:30px; border: none;" readonly id="feeship" name="ship" class="form-control">
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<script>

    // Lấy tham chiếu đến thẻ select bằng id
    var select = document.getElementById("countrySelect");
    var selectDistrict = document.getElementById("districtSelect");
    var selectWard = document.getElementById("wardSelect");
    var ldistrict = new Array();
    var lward = new Array();
    var iddis = 0;
    var idwar = 0;
    var inputdis = document.getElementById("district");
    var inputward = document.getElementById("ward");
    // Thêm một sự kiện onchange cho thẻ select
    select.onchange = function() {
        // Lấy giá trị được chọn trong thẻ select
        var selectedCountry = select.value;
        ldistrict.splice(0, ldistrict.length);
        $("#districtSelect").empty(); // Xóa tất cả các thẻ option trong phần tử select có id là DropList
        $("#wardSelect").empty();
        inputdis.value = "";
        inputward.value = "";
        // Sử dụng fetch() để gửi một request GET đến /Home/GetUsers
        fetch("/Home/district", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }, provinceid: selectedCountry,
            body: provinceid = selectedCountry
        })
            .then(response => response.json()) // Chuyển đổi response thành JSON
            .then(data => {

                // Xử lý dữ liệu JSON

                data.forEach(function(districs) {
                    ldistrict.push(districs);
                    console.log(ldistrict);
                    // Duyệt qua mảng các user
                    var option = document.createElement("option"); // Tạo một phần tử option mới
                    option.innerHTML = districs.districtID; // Gán giá trị cho option
                    option.value = districs.districtName; // Gán nội dung hiển thị cho option
                    selectDistrict.appendChild(option); // Thêm option vào thẻ select

                });

            })
            .catch(error => {
                // Xử lý lỗi
                console.error(error); // In ra lỗi
            });


    };

    //chọn phường
    inputdis.onchange = function() {
        // Lấy giá trị được chọn trong thẻ select
        var district = 0;
        lward.splice(0, ldistrict.length);
        ldistrict.forEach(function(id) {
            if (id.districtName == inputdis.value) {
                district = id.districtID;
                iddis = id.districtID;
            }

        });
        console.log(iddis);
        $("#wardSelect").empty(); // Xóa tất cả các thẻ option trong phần tử select có id là DropList


        // Sử dụng fetch() để gửi một request GET đến /Home/GetUsers
        fetch("/Home/ward", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }, districtid: district,
            body: districtid = district
        })
            .then(response => response.json()) // Chuyển đổi response thành JSON
            .then(data => {

                // Xử lý dữ liệu JSON

                data.forEach(function(ward) {

                    // Duyệt qua mảng các user
                    var option = document.createElement("option"); // Tạo một phần tử option mới
                    option.innerHTML = ward.wardCode; // Gán giá trị cho option
                    option.value = ward.wardName; // Gán nội dung hiển thị cho option
                    selectWard.appendChild(option); // Thêm option vào thẻ select
                    lward.push(ward);


                });
            })
            .catch(error => {
                // Xử lý lỗi
                console.error(error); // In ra lỗi
            });
    };


    inputward.onchange = function() {
        // Lấy giá trị được chọn trong thẻ select
        var district = 0;
        var ward = 0
        lward.forEach(function(id) {
            if (id.wardName == inputward.value) {

                idwar = id.wardCode;
                ward = id.wardCode;
            }

        });
        var data = {
            towardcode: ward,
            to_district_id: iddis,
        };
        var json = JSON.stringify(data);
        // Sử dụng fetch() để gửi một request GET đến /Home/GetUsers
        fetch("/Home/Feeship", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: json
        })
            .then(response => response.json()) // Chuyển đổi response thành JSON
            .then(data => {

                // Xử lý dữ liệu JSON

                console.log(data.total);


                document.getElementById("feeship").value = data.total;
            })
            .catch(error => {
                // Xử lý lỗi
                console.error(error); // In ra lỗi
            });
    };


    document.addEventListener('DOMContentLoaded', function() {
        var phoneNumberInput = document.getElementById('sdt');
        var phoneErrorSpan = document.getElementById('phoneError');

        phoneNumberInput.addEventListener('input', function() {
            var inputValue = phoneNumberInput.value;
            var cleanedValue = inputValue.replace(/[^0-9+]/g, '');
            cleanedValue = cleanedValue.slice(0, 10);
            phoneNumberInput.value = cleanedValue;
        });

        phoneNumberInput.addEventListener('blur', function() {
            validatePhoneNumber(phoneNumberInput.value);
        });

        function validatePhoneNumber(phoneNumber) {
            var phoneRegex = /^\+?[0-9]{1,4}-?[0-9]{3,4}-?[0-9]{4,}$/;

            if (phoneRegex.test(phoneNumber) && phoneNumber.startsWith('0')) {
                // Nếu số điện thoại hợp lệ, ẩn thông báo và hiển thị nền trắng cho ô nhập
                phoneErrorSpan.textContent = '';
                phoneNumberInput.style.backgroundColor = 'white';
            } else {
                if (phoneNumber.length < 10) {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại có ít hơn 10 kí tự
                    phoneErrorSpan.textContent = 'Số điện thoại phải có ít nhất 10 kí tự.';
                } else if (!phoneNumber.startsWith('0')) {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại không bắt đầu bằng số 0
                    phoneErrorSpan.textContent = 'Số điện thoại phải bắt đầu bằng số 0.';
                } else {
                    // Hiển thị thông báo trong thẻ span khi số điện thoại không hợp lệ
                    phoneErrorSpan.textContent = 'Số điện thoại không hợp lệ.';
                }


            }
        }
    });
</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }
